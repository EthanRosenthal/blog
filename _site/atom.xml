<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Data Piques</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2014-08-26T23:02:36-04:00</updated>
 <id></id>
 <author>
   <name>Ethan Rosenthal</name>
   <email></email>
 </author>

 
 <entry>
   <title>Setting up a website and separate blog repository hosted on GitHub</title>
   <link href="//2014/08/22/hello-world/"/>
   <updated>2014-08-22T00:00:00-04:00</updated>
   <id>/2014/08/22/hello-world</id>
   <content type="html">&lt;p&gt;As the title of the blog suggests, I would like to use this space to write about anything &amp;quot;data&amp;quot;-related that piques my interest. Likely, this will consist of personal and academic projects.&lt;/p&gt;

&lt;p&gt;As the title of this post suggests, I would like to explain how I created this blog and my &lt;a href=&quot;http://ethanrosenthal.com&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Setting up the website - &lt;a href=&quot;http://ethanrosenthal.com&quot;&gt;ethanrosenthal.com&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;During my 5 years at Columbia, I have sporadically messed around with coding html and css in an attempt to make a personal website. Various iterations were hosted on the physics department servers, but, in the interest of long-term hosting, I decided to migrate everything to &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;. This was largely inspired by these blog posts from &lt;a href=&quot;http://joshualande.com/jekyll-github-pages-poole/&quot;&gt;Joshua Lande&lt;/a&gt; and &lt;a href=&quot;http://bdewilde.github.io/blog/2014/08/10/on-starting-over-with-jekyll/&quot;&gt;Burton DeWilde&lt;/a&gt; though implemented a bit differently.&lt;/p&gt;

&lt;h4&gt;GitHub Pages&lt;/h4&gt;

&lt;p&gt;GitHub has a feature called &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; that provides one free website per account. Setting up your free website is quite easy (and detailed better at the above link):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new repository titled &lt;em&gt;username&lt;/em&gt;.github.io&lt;/li&gt;
&lt;li&gt;Clone the repository to your computer&lt;/li&gt;
&lt;li&gt;&amp;quot;Initialize&amp;quot; the repo by creating an &lt;em&gt;index.html&lt;/em&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your new GitHub website is &lt;em&gt;username&lt;/em&gt;.github.io. You can now build your website in the repo you created, and GitHub takes care of the rest.&lt;/p&gt;

&lt;p&gt;All I had to do was copy all of the files from the physics server into my new repo, and my website was built at &lt;a href=&quot;ethanrosenthal.github.io&quot;&gt;ethanrosenthal.github.io&lt;/a&gt; (because &amp;quot;ethanrosenthal&amp;quot; is my GitHub username).&lt;/p&gt;

&lt;h4&gt;Adding a custom domain&lt;/h4&gt;

&lt;p&gt;I wanted to use a custom domain instead of ethanrosenthal.github.io, so I bought ethanrosenthal.com through &lt;a href=&quot;namecheap.com&quot;&gt;namecheap.com&lt;/a&gt; for ~$10/year. In order setup the custom domain on namecheap, go to &amp;quot;Your Domains/Products,&amp;quot; click the purchased custom domain, and then click &amp;quot;All Host Records.&amp;quot; You should now fill in the top three rows as follows:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Host Name&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;IP ADDRESS/URL&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;RECORD TYPE&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;TTL&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;td&gt;192.30.252.153&lt;/td&gt;
&lt;td&gt;A (Address)&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;td&gt;192.30.252.154&lt;/td&gt;
&lt;td&gt;A (Address)&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;www&lt;/td&gt;
&lt;td&gt;&lt;em&gt;username&lt;/em&gt;.github.io&lt;/td&gt;
&lt;td&gt;CNAME (Alias)&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Below is a screenshot of my filled in namecheap dashboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2014-08-24-namecheap-dashboard.png&quot; alt=&quot;namecheap dashboard&quot;&gt;&lt;/p&gt;

&lt;p&gt;In addition to the above modifications that you have to make, you need to include a file in your &lt;em&gt;username&lt;/em&gt;.github.io repo titled &amp;quot;CNAME&amp;quot; which contains your custom domain name in it. For example, mine simply says &amp;quot;ethanrosenthal.com&amp;quot;. It may take some time for these changes to fully propagate, but, eventually, your custom domain should successfully redirect to the GitHub Pages repo (though still display the custom domain in the url bar).&lt;/p&gt;

&lt;h2&gt;Setting up the blog - &lt;a href=&quot;http://blog.ethanrosenthal.com&quot;&gt;blog.ethanrosenthal.com&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In addition to one free personal website, GitHub Pages allows for unlimited &amp;quot;Project&amp;quot; Pages. You can create a Project Page for any repository in your GitHub account. The Project Page is essentially a website associated with your repo. This is how I chose to setup the blog. I created a new repo called &amp;quot;blog&amp;quot; and filled it with all of the files for a full-fledged blog.&lt;/p&gt;

&lt;h4&gt;Jekyll and Poole&lt;/h4&gt;

&lt;p&gt;Considering it took me many years to create my website, I opted to use a blog template rather than start from scratch. GitHub Pages are powered by &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, a static site generator. Blogging is quite simple - you can write your blog posts in Markdown, and Jekyll pretty much takes care of anything else that you do not feel like customizing. This even includes the layout of everything if you choose to download &lt;a href=&quot;http://getpoole.com/&quot;&gt;Poole&lt;/a&gt;. Simply go to the &lt;a href=&quot;https://github.com/poole/poole&quot;&gt;Poole GitHub&lt;/a&gt;, clone the repo, and then type&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in your terminal. Jekyll will now build a static website, as specified and laid out by Poole, in the folder _site/. The key difference between your free GitHub website and GitHub Project Pages is that you need to push your website to a separate &amp;quot;gh-pages&amp;quot; branch in order to build the Project Pages website associated with your repository. So, after building your static website on your local machine, you must switch to the gh-pages branch, add/commit your files, and then push to GitHub. The Jekyll-built &lt;em&gt;repo&lt;/em&gt; website will now be located at &lt;em&gt;username&lt;/em&gt;.github.io/&lt;em&gt;repo&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;Custom Project Pages domains&lt;/h4&gt;

&lt;p&gt;I ran into some issues with my blog Project Page not formatting correctly because of my custom domain. I am still not exactly sure why this was happening, but creating a custom domain for the blog solved the problem. To do this, I added the following under SUB-DOMAIN SETTINGS on the namecheap dashboard&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Host Name&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;IP ADDRESS/URL&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;RECORD TYPE&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;TTL&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;blog&lt;/td&gt;
&lt;td&gt;ethanrosenthal.github.io.&lt;/td&gt;
&lt;td&gt;CNAME (Alias)&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;I also added a CNAME file to the blog repo containing the line &amp;quot;blog.ethanrosenthal.com&amp;quot;. Now, the blog is located at &lt;a href=&quot;http://blog.ethanrosenthal.com/&quot;&gt;blog.ethanrosenthal.com&lt;/a&gt;, and everything redirects and formats fine.&lt;/p&gt;

&lt;h2&gt;Lastly&lt;/h2&gt;

&lt;p&gt;There are a couple other things that I have done, like adding an &lt;a href=&quot;/archive/&quot;&gt;Archive&lt;/a&gt; section and Google Analytics tracking, but these tasks have been documented the blog posts that I linked to at the top. Hopefully, I will have some more interesting projects to post soon.&lt;/p&gt;
</content>
 </entry>
 

</feed>
